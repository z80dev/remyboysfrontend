{"abi":[{"inputs":[{"internalType":"address","name":"emitter","type":"address"}],"name":"FailedContractCreation","type":"error"},{"inputs":[{"internalType":"address","name":"emitter","type":"address"},{"internalType":"bytes","name":"revertData","type":"bytes"}],"name":"FailedContractInitialisation","type":"error"},{"inputs":[{"internalType":"address","name":"emitter","type":"address"},{"internalType":"bytes","name":"revertData","type":"bytes"}],"name":"FailedEtherTransfer","type":"error"},{"inputs":[{"internalType":"address","name":"emitter","type":"address"}],"name":"InvalidNonceValue","type":"error"},{"inputs":[{"internalType":"address","name":"emitter","type":"address"}],"name":"InvalidSalt","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newContract","type":"address"},{"indexed":true,"internalType":"bytes32","name":"salt","type":"bytes32"}],"name":"ContractCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newContract","type":"address"}],"name":"ContractCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newContract","type":"address"},{"indexed":true,"internalType":"bytes32","name":"salt","type":"bytes32"}],"name":"Create3ProxyContractCreation","type":"event"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes32","name":"initCodeHash","type":"bytes32"}],"name":"computeCreate2Address","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes32","name":"initCodeHash","type":"bytes32"},{"internalType":"address","name":"deployer","type":"address"}],"name":"computeCreate2Address","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"address","name":"deployer","type":"address"}],"name":"computeCreate3Address","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"}],"name":"computeCreate3Address","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"computeCreateAddress","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"deployer","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"computeCreateAddress","outputs":[{"internalType":"address","name":"computedAddress","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"deployCreate","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"deployCreate2","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"deployCreate2","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}],"internalType":"struct CreateX.Values","name":"values","type":"tuple"},{"internalType":"address","name":"refundAddress","type":"address"}],"name":"deployCreate2AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}],"internalType":"struct CreateX.Values","name":"values","type":"tuple"}],"name":"deployCreate2AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}],"internalType":"struct CreateX.Values","name":"values","type":"tuple"},{"internalType":"address","name":"refundAddress","type":"address"}],"name":"deployCreate2AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}],"internalType":"struct CreateX.Values","name":"values","type":"tuple"}],"name":"deployCreate2AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"address","name":"implementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"deployCreate2Clone","outputs":[{"internalType":"address","name":"proxy","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"deployCreate2Clone","outputs":[{"internalType":"address","name":"proxy","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"deployCreate3","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"deployCreate3","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}],"internalType":"struct CreateX.Values","name":"values","type":"tuple"}],"name":"deployCreate3AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}],"internalType":"struct CreateX.Values","name":"values","type":"tuple"}],"name":"deployCreate3AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}],"internalType":"struct CreateX.Values","name":"values","type":"tuple"},{"internalType":"address","name":"refundAddress","type":"address"}],"name":"deployCreate3AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}],"internalType":"struct CreateX.Values","name":"values","type":"tuple"},{"internalType":"address","name":"refundAddress","type":"address"}],"name":"deployCreate3AndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}],"internalType":"struct CreateX.Values","name":"values","type":"tuple"}],"name":"deployCreateAndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint256","name":"constructorAmount","type":"uint256"},{"internalType":"uint256","name":"initCallAmount","type":"uint256"}],"internalType":"struct CreateX.Values","name":"values","type":"tuple"},{"internalType":"address","name":"refundAddress","type":"address"}],"name":"deployCreateAndInit","outputs":[{"internalType":"address","name":"newContract","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"deployCreateClone","outputs":[{"internalType":"address","name":"proxy","type":"address"}],"stateMutability":"payable","type":"function"}],"contractName":"CreateX","deploymentBytecode":{"bytecode":"0x60a0604052306080523480156012575f80fd5b50608051611f6d6100d35f395f81816104b80152818161059a01528181610647015281816106ac01528181610ad001528181610b9301528181610bd801528181610c0a01528181610c8201528181610d3101528181610ef001528181610f3501528181610f6701528181610fdf015281816110ce0152818161123001528181611275015281816112a70152818161131f01528181611410015281816115ce015281816116920152818161173a015281816117df01526118620152611f6d5ff3fe608060405260043610610146575f3560e01c806381503da1116100b3578063d323826a1161006d578063d323826a146102f8578063ddda0acb14610317578063e437252a1461032a578063e96deee41461033d578063f5745aba14610350578063f966449814610363575f80fd5b806381503da11461027a578063890c283b1461028d57806398e81077146102ac5780639c36a286146102bf578063a7db93f2146102d2578063c3fe107b146102e5575f80fd5b80632f990e3f116101045780632f990e3f146101e457806331a7c8c8146101f757806342d654fc1461020a5780636cec25361461022957806374637a7a146102485780637f56536014610267575f80fd5b8062d84acb1461014a578063263076681461017957806326a32fc71461018c57806327fe18221461019f5780632852527a146101b257806328ddd046146101c5575b5f80fd5b61015d610158366004611ac9565b610376565b6040516001600160a01b03909116815260200160405180910390f35b61015d610187366004611b42565b61038d565b61015d61019a366004611b85565b6103ea565b61015d6101ad366004611b85565b610402565b61015d6101c0366004611bd1565b61043b565b3480156101d0575f80fd5b5061015d6101df366004611c23565b610594565b61015d6101f2366004611c3a565b6105bf565b61015d610205366004611c3a565b6105dc565b348015610215575f80fd5b5061015d610224366004611ca9565b6105e9565b348015610234575f80fd5b5061015d610243366004611c23565b610640565b348015610253575f80fd5b5061015d610262366004611cd3565b61066b565b61015d610275366004611b85565b610a9c565b61015d610288366004611cfb565b610aae565b348015610298575f80fd5b5061015d6102a7366004611d2f565b610ac8565b61015d6102ba366004611d4f565b610af4565b61015d6102cd366004611b42565b610cc7565b61015d6102e0366004611dc4565b610e2f565b61015d6102f3366004611c3a565b611026565b348015610303575f80fd5b5061015d610312366004611e4d565b61103b565b61015d610325366004611dc4565b611064565b61015d610338366004611d4f565b611368565b61015d61034b366004611ac9565b61137d565b61015d61035e366004611d4f565b61138b565b61015d610371366004611cfb565b6113a0565b5f6103848585858533611064565b95945050505050565b5f80610398846114d0565b90508083516020850134f591506103ae82611700565b60405181906001600160a01b038416907fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f7905f90a35092915050565b5f6103fc6103f661176a565b8361038d565b92915050565b5f81516020830134f0905061041681611700565b6040516001600160a01b038216905f80516020611f18833981519152905f90a2919050565b5f80610446856114d0565b90505f8460601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037825ff59350506001600160a01b0383166104ea5760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024015b60405180910390fd5b60405182906001600160a01b038516907fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f7905f90a35f80846001600160a01b0316348760405161053a9190611e76565b5f6040518083038185875af1925050503d805f8114610574576040519150601f19603f3d011682016040523d82523d5f602084013e610579565b606091505b50915091506105898282896117c3565b505050509392505050565b5f6103fc7f00000000000000000000000000000000000000000000000000000000000000008361066b565b5f6105d46105cb61176a565b85858533611064565b949350505050565b5f6105d484848433610af4565b5f604051825f5260ff600b53836020527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f6040526055600b20601452806040525061d6945f52600160345350506017601e20919050565b5f6103fc827f00000000000000000000000000000000000000000000000000000000000000006105e9565b5f6060602560fa1b61068560016001600160401b03611e8c565b6001600160401b03168411156106d957604051633c55ab3b60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b835f0361073557604051606b60f91b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152600160ff1b60368201526037015b6040516020818303038152906040529150610a8c565b607f841161078257604051606b60f91b60208201526001600160f81b031980831660218301526001600160601b0319606088901b16602283015260f886901b16603682015260370161071f565b60ff84116107d95760405160d760f81b60208201526001600160f81b031980831660218301526001600160601b0319606088901b166022830152608160f81b603683015260f886901b16603782015260380161071f565b61ffff841161083957604051601b60fb1b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152604160f91b60368201526001600160f01b031960f086901b16603782015260390161071f565b62ffffff841161089a5760405160d960f81b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152608360f81b60368201526001600160e81b031960e886901b166037820152603a0161071f565b63ffffffff84116108fc57604051606d60f91b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152602160fa1b60368201526001600160e01b031960e086901b166037820152603b0161071f565b64ffffffffff841161095f5760405160db60f81b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152608560f81b60368201526001600160d81b031960d886901b166037820152603c0161071f565b65ffffffffffff84116109c357604051603760fa1b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152604360f91b60368201526001600160d01b031960d086901b166037820152603d0161071f565b66ffffffffffffff8411610a285760405160dd60f81b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152608760f81b60368201526001600160c81b031960c886901b166037820152603e0161071f565b604051606f60f91b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152601160fb1b60368201526001600160c01b031960c086901b166037820152603f0160405160208183030381529060405291505b5080516020909101209392505050565b5f6103fc610aa861176a565b83610cc7565b5f610ac1610aba61176a565b848461043b565b9392505050565b5f610ac183837f000000000000000000000000000000000000000000000000000000000000000061103b565b5f8451602086018451f09050610b0981611700565b6040516001600160a01b038216905f80516020611f18833981519152905f90a25f80826001600160a01b0316856020015187604051610b489190611e76565b5f6040518083038185875af1925050503d805f8114610b82576040519150601f19603f3d011682016040523d82523d5f602084013e610b87565b606091505b509150915081610bce577f00000000000000000000000000000000000000000000000000000000000000008160405163a57ca23960e01b81526004016104e1929190611ebf565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163115610cbd57836001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316316040515f6040518083038185875af1925050503d805f8114610c70576040519150601f19603f3d011682016040523d82523d5f602084013e610c75565b606091505b50909250905081610cbd577f00000000000000000000000000000000000000000000000000000000000000008160405163c2b3f44560e01b81526004016104e1929190611ebf565b5050949350505050565b5f80610cd2846114d0565b90505f6040518060400160405280601081526020016f67363d3d37363d34f03d5260086018f360801b81525090505f828251602084015ff590506001600160a01b038116610d5e5760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b60405183906001600160a01b038316907f2feea65dd4e9f9cbd86b74b7734210c59a1b2981b5b137bd0ee3e208200c9067905f90a3610d9c83610640565b93505f816001600160a01b03163487604051610db89190611e76565b5f6040518083038185875af1925050503d805f8114610df2576040519150601f19603f3d011682016040523d82523d5f602084013e610df7565b606091505b50509050610e05818661181f565b6040516001600160a01b038616905f80516020611f18833981519152905f90a25050505092915050565b5f80610e3a876114d0565b9050808651602088018651f59150610e5182611700565b60405181906001600160a01b038416907fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f7905f90a35f80836001600160a01b0316866020015188604051610ea59190611e76565b5f6040518083038185875af1925050503d805f8114610edf576040519150601f19603f3d011682016040523d82523d5f602084013e610ee4565b606091505b509150915081610f2b577f00000000000000000000000000000000000000000000000000000000000000008160405163a57ca23960e01b81526004016104e1929190611ebf565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016311561101a57846001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316316040515f6040518083038185875af1925050503d805f8114610fcd576040519150601f19603f3d011682016040523d82523d5f602084013e610fd2565b606091505b5090925090508161101a577f00000000000000000000000000000000000000000000000000000000000000008160405163c2b3f44560e01b81526004016104e1929190611ebf565b50505095945050505050565b5f6105d461103261176a565b85858533610e2f565b5f604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b5f8061106f876114d0565b90505f6040518060400160405280601081526020016f67363d3d37363d34f03d5260086018f360801b81525090505f828251602084015ff590506001600160a01b0381166110fb5760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b60405183906001600160a01b038316907f2feea65dd4e9f9cbd86b74b7734210c59a1b2981b5b137bd0ee3e208200c9067905f90a361113983610640565b93505f816001600160a01b0316875f01518a6040516111589190611e76565b5f6040518083038185875af1925050503d805f8114611192576040519150601f19603f3d011682016040523d82523d5f602084013e611197565b606091505b505090506111a5818661181f565b6040516001600160a01b038616905f80516020611f18833981519152905f90a26060856001600160a01b031688602001518a6040516111e49190611e76565b5f6040518083038185875af1925050503d805f811461121e576040519150601f19603f3d011682016040523d82523d5f602084013e611223565b606091505b5090925090508161126b577f00000000000000000000000000000000000000000000000000000000000000008160405163a57ca23960e01b81526004016104e1929190611ebf565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016311561135a57866001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316316040515f6040518083038185875af1925050503d805f811461130d576040519150601f19603f3d011682016040523d82523d5f602084013e611312565b606091505b5090925090508161135a577f00000000000000000000000000000000000000000000000000000000000000008160405163c2b3f44560e01b81526004016104e1929190611ebf565b505050505095945050505050565b5f61038461137461176a565b86868686610e2f565b5f6103848585858533610e2f565b5f61038461139761176a565b86868686611064565b5f808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037815ff09250506001600160a01b03821661143d5760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b6040516001600160a01b038316905f80516020611f18833981519152905f90a25f80836001600160a01b031634866040516114789190611e76565b5f6040518083038185875af1925050503d805f81146114b2576040519150601f19603f3d011682016040523d82523d5f602084013e6114b7565b606091505b50915091506114c78282886117c3565b50505092915050565b5f805f6114dc84611893565b90925090505f8260028111156114f4576114f4611f03565b14801561151157505f81600281111561150f5761150f611f03565b145b1561154f57604080513360208201524691810191909152606081018590526080016040516020818303038152906040528051906020012092506116f9565b5f82600281111561156257611562611f03565b1480156115805750600181600281111561157e5761157e611f03565b145b1561159f5761159833855f9182526020526040902090565b92506116f9565b5f8260028111156115b2576115b2611f03565b036115fb576040516313b3a2a160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b600182600281111561160f5761160f611f03565b14801561162c57505f81600281111561162a5761162a611f03565b145b156116445761159846855f9182526020526040902090565b600182600281111561165857611658611f03565b1480156116765750600281600281111561167457611674611f03565b145b156116bf576040516313b3a2a160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b6116c761176a565b84036116d357836116f6565b604080516020810186905201604051602081830303815290604052805190602001205b92505b5050919050565b6001600160a01b038116158061171e57506001600160a01b0381163b155b156117675760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b50565b6040805143601f198101406020830152419282019290925260608101919091524260808201524460a08201524660c08201523360e08201525f906101000160405160208183030381529060405280519060200120905090565b8215806117d857506001600160a01b0381163b155b1561181a577f00000000000000000000000000000000000000000000000000000000000000008260405163a57ca23960e01b81526004016104e1929190611ebf565b505050565b81158061183357506001600160a01b038116155b8061184657506001600160a01b0381163b155b1561188f5760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b5050565b5f80606083901c331480156118bb57508260141a60f81b6001600160f81b031916600160f81b145b156118ca57505f905080915091565b606083901c331480156118ec57506001600160f81b0319601484901a60f81b16155b156118fc57505f90506001915091565b33606084901c0361191257505f90506002915091565b606083901c15801561193757508260141a60f81b6001600160f81b031916600160f81b145b156119475750600190505f915091565b606083901c15801561196857506001600160f81b0319601484901a60f81b16155b1561197857506001905080915091565b606083901c61198d5750600190506002915091565b8260141a60f81b6001600160f81b031916600160f81b036119b35750600290505f915091565b8260141a60f81b6001600160f81b0319165f036119d65750600290506001915091565b506002905080915091565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112611a04575f80fd5b81356001600160401b0380821115611a1e57611a1e6119e1565b604051601f8301601f19908116603f01168101908282118183101715611a4657611a466119e1565b81604052838152866020858801011115611a5e575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f60408284031215611a8d575f80fd5b604051604081018181106001600160401b0382111715611aaf57611aaf6119e1565b604052823581526020928301359281019290925250919050565b5f805f8060a08587031215611adc575f80fd5b8435935060208501356001600160401b0380821115611af9575f80fd5b611b05888389016119f5565b94506040870135915080821115611b1a575f80fd5b50611b27878288016119f5565b925050611b378660608701611a7d565b905092959194509250565b5f8060408385031215611b53575f80fd5b8235915060208301356001600160401b03811115611b6f575f80fd5b611b7b858286016119f5565b9150509250929050565b5f60208284031215611b95575f80fd5b81356001600160401b03811115611baa575f80fd5b6105d4848285016119f5565b80356001600160a01b0381168114611bcc575f80fd5b919050565b5f805f60608486031215611be3575f80fd5b83359250611bf360208501611bb6565b915060408401356001600160401b03811115611c0d575f80fd5b611c19868287016119f5565b9150509250925092565b5f60208284031215611c33575f80fd5b5035919050565b5f805f60808486031215611c4c575f80fd5b83356001600160401b0380821115611c62575f80fd5b611c6e878388016119f5565b94506020860135915080821115611c83575f80fd5b50611c90868287016119f5565b925050611ca08560408601611a7d565b90509250925092565b5f8060408385031215611cba575f80fd5b82359150611cca60208401611bb6565b90509250929050565b5f8060408385031215611ce4575f80fd5b611ced83611bb6565b946020939093013593505050565b5f8060408385031215611d0c575f80fd5b611d1583611bb6565b915060208301356001600160401b03811115611b6f575f80fd5b5f8060408385031215611d40575f80fd5b50508035926020909101359150565b5f805f8060a08587031215611d62575f80fd5b84356001600160401b0380821115611d78575f80fd5b611d84888389016119f5565b95506020870135915080821115611d99575f80fd5b50611da6878288016119f5565b935050611db68660408701611a7d565b9150611b3760808601611bb6565b5f805f805f60c08688031215611dd8575f80fd5b8535945060208601356001600160401b0380821115611df5575f80fd5b611e0189838a016119f5565b95506040880135915080821115611e16575f80fd5b50611e23888289016119f5565b935050611e338760608801611a7d565b9150611e4160a08701611bb6565b90509295509295909350565b5f805f60608486031215611e5f575f80fd5b8335925060208401359150611ca060408501611bb6565b5f82518060208501845e5f920191825250919050565b6001600160401b03828116828216039080821115611eb857634e487b7160e01b5f52601160045260245ffd5b5092915050565b60018060a01b0383168152604060208201525f82518060408401528060208501606085015e5f606082850101526060601f19601f8301168401019150509392505050565b634e487b7160e01b5f52602160045260245ffdfe4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b511a26469706673582212205c996ef204194b1aa912ec90e05f1b62390f969518fbd8b9d374be5b737fb14164736f6c63430008190033"},"devdoc":{"author":"pcaversaccio (https://web.archive.org/web/20230921103111/https://pcaversaccio.com/)","custom:coauthor":"Matt Solomon (https://web.archive.org/web/20230921103335/https://mattsolomon.dev/)","custom:security-contact":"See https://web.archive.org/web/20230921105029/https://raw.githubusercontent.com/pcaversaccio/createx/main/SECURITY.md.","details":"To simplify testing of non-public variables and functions, we use the `internal` function visibility specifier `internal` for all variables and functions, even though they could technically be `private` since we do not expect anyone to inherit from the `CreateX` contract.","errors":{"FailedContractCreation(address)":[{"details":"Error that occurs when the contract creation failed.","params":{"emitter":"The contract that emits the error."}}],"FailedContractInitialisation(address,bytes)":[{"details":"Error that occurs when the contract initialisation call failed.","params":{"emitter":"The contract that emits the error.","revertData":"The data returned by the failed initialisation call."}}],"FailedEtherTransfer(address,bytes)":[{"details":"Error that occurs when transferring ether has failed.","params":{"emitter":"The contract that emits the error.","revertData":"The data returned by the failed ether transfer."}}],"InvalidNonceValue(address)":[{"details":"Error that occurs when the nonce value is invalid.","params":{"emitter":"The contract that emits the error."}}],"InvalidSalt(address)":[{"details":"Error that occurs when the salt value is invalid.","params":{"emitter":"The contract that emits the error."}}]},"events":{"ContractCreation(address)":{"details":"Event that is emitted when a contract is successfully created.","params":{"newContract":"The address of the new contract."}},"ContractCreation(address,bytes32)":{"details":"Event that is emitted when a contract is successfully created.","params":{"newContract":"The address of the new contract.","salt":"The 32-byte random value used to create the contract address."}},"Create3ProxyContractCreation(address,bytes32)":{"details":"Event that is emitted when a `CREATE3` proxy contract is successfully created.","params":{"newContract":"The address of the new proxy contract.","salt":"The 32-byte random value used to create the proxy address."}}},"kind":"dev","methods":{"computeCreate2Address(bytes32,bytes32)":{"details":"Returns the address where a contract will be stored if deployed via this contract using the `CREATE2` opcode. Any change in the `initCodeHash` or `salt` values will result in a new destination address.","params":{"initCodeHash":"The 32-byte bytecode digest of the contract creation bytecode.","salt":"The 32-byte random value used to create the contract address."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"computeCreate2Address(bytes32,bytes32,address)":{"details":"Returns the address where a contract will be stored if deployed via `deployer` using the `CREATE2` opcode. Any change in the `initCodeHash` or `salt` values will result in a new destination address. This implementation is based on OpenZeppelin: https://web.archive.org/web/20230921113703/https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/181d518609a9f006fcb97af63e6952e603cf100e/contracts/utils/Create2.sol.","params":{"deployer":"The 20-byte deployer address.","initCodeHash":"The 32-byte bytecode digest of the contract creation bytecode.","salt":"The 32-byte random value used to create the contract address."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"computeCreate3Address(bytes32)":{"details":"Returns the address where a contract will be stored if deployed via this contract using the `CREATE3` pattern (i.e. without an initcode factor). Any change in the `salt` value will result in a new destination address. This implementation is based on Solady: https://web.archive.org/web/20230921114120/https://raw.githubusercontent.com/Vectorized/solady/1c1ac4ad9c8558001e92d8d1a7722ef67bec75df/src/utils/CREATE3.sol.","params":{"salt":"The 32-byte random value used to create the proxy contract address."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"computeCreate3Address(bytes32,address)":{"details":"Returns the address where a contract will be stored if deployed via `deployer` using the `CREATE3` pattern (i.e. without an initcode factor). Any change in the `salt` value will result in a new destination address. This implementation is based on Solady: https://web.archive.org/web/20230921114120/https://raw.githubusercontent.com/Vectorized/solady/1c1ac4ad9c8558001e92d8d1a7722ef67bec75df/src/utils/CREATE3.sol.","params":{"deployer":"The 20-byte deployer address.","salt":"The 32-byte random value used to create the proxy contract address."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"computeCreateAddress(address,uint256)":{"details":"Returns the address where a contract will be stored if deployed via `deployer` using the `CREATE` opcode. For the specification of the Recursive Length Prefix (RLP) encoding scheme, please refer to p. 19 of the Ethereum Yellow Paper (https://web.archive.org/web/20230921110603/https://ethereum.github.io/yellowpaper/paper.pdf) and the Ethereum Wiki (https://web.archive.org/web/20230921112807/https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/). For further insights also, see the following issue: https://web.archive.org/web/20230921112943/https://github.com/transmissions11/solmate/issues/207. Based on the EIP-161 (https://web.archive.org/web/20230921113207/https://raw.githubusercontent.com/ethereum/EIPs/master/EIPS/eip-161.md) specification, all contract accounts on the Ethereum mainnet are initiated with `nonce = 1`. Thus, the first contract address created by another contract is calculated with a non-zero nonce.","params":{"deployer":"The 20-byte deployer address.","nonce":"The next 32-byte nonce of the deployer address."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"computeCreateAddress(uint256)":{"details":"Returns the address where a contract will be stored if deployed via this contract using the `CREATE` opcode. For the specification of the Recursive Length Prefix (RLP) encoding scheme, please refer to p. 19 of the Ethereum Yellow Paper (https://web.archive.org/web/20230921110603/https://ethereum.github.io/yellowpaper/paper.pdf) and the Ethereum Wiki (https://web.archive.org/web/20230921112807/https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/). For further insights also, see the following issue: https://web.archive.org/web/20230921112943/https://github.com/transmissions11/solmate/issues/207. Based on the EIP-161 (https://web.archive.org/web/20230921113207/https://raw.githubusercontent.com/ethereum/EIPs/master/EIPS/eip-161.md) specification, all contract accounts on the Ethereum mainnet are initiated with `nonce = 1`. Thus, the first contract address created by another contract is calculated with a non-zero nonce.","params":{"nonce":"The next 32-byte nonce of this contract."},"returns":{"computedAddress":"The 20-byte address where a contract will be stored."}},"deployCreate(bytes)":{"details":"Deploys a new contract via calling the `CREATE` opcode and using the creation bytecode `initCode` and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor.","params":{"initCode":"The creation bytecode."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2(bytes)":{"details":"Deploys a new contract via calling the `CREATE2` opcode and using the creation bytecode `initCode` and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor.","params":{"initCode":"The creation bytecode."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2(bytes32,bytes)":{"details":"Deploys a new contract via calling the `CREATE2` opcode and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor.","params":{"initCode":"The creation bytecode.","salt":"The 32-byte random value used to create the contract address."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2AndInit(bytes,bytes,(uint256,uint256))":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2AndInit(bytes,bytes,(uint256,uint256),address)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","refundAddress":"The 20-byte address where any excess ether is returned to.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2AndInit(bytes32,bytes,bytes,(uint256,uint256))":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the salt value `salt`, creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","salt":"The 32-byte random value used to create the contract address.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2AndInit(bytes32,bytes,bytes,(uint256,uint256),address)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE2` opcode and using the salt value `salt`, the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","refundAddress":"The 20-byte address where any excess ether is returned to.","salt":"The 32-byte random value used to create the contract address.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate2Clone(address,bytes)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys a new EIP-1167 minimal proxy contract using the `CREATE2` opcode and the salt value `salt`, and initialises the implementation contract using the implementation address `implementation`, the initialisation code `data`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! Note that if `msg.value` is non-zero, the initialiser function called via `data` must be `payable`.","params":{"data":"The initialisation code that is passed to the deployed proxy contract.","implementation":"The 20-byte implementation contract address."},"returns":{"proxy":"The 20-byte address where the clone was deployed."}},"deployCreate2Clone(bytes32,address,bytes)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys a new EIP-1167 minimal proxy contract using the `CREATE2` opcode and the salt value `salt`, and initialises the implementation contract using the implementation address `implementation`, the initialisation code `data`, and `msg.value` as inputs. Note that if `msg.value` is non-zero, the initialiser function called via `data` must be `payable`.","params":{"data":"The initialisation code that is passed to the deployed proxy contract.","implementation":"The 20-byte implementation contract address.","salt":"The 32-byte random value used to create the proxy contract address."},"returns":{"proxy":"The 20-byte address where the clone was deployed."}},"deployCreate3(bytes)":{"details":"Deploys a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"initCode":"The creation bytecode."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate3(bytes32,bytes)":{"custom:security":"We strongly recommend implementing a permissioned deploy protection by setting the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun proxy deployments on other chains.","details":"Deploys a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `msg.value` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"initCode":"The creation bytecode.","salt":"The 32-byte random value used to create the proxy contract address."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate3AndInit(bytes,bytes,(uint256,uint256))":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate3AndInit(bytes,bytes,(uint256,uint256),address)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. The salt value is calculated pseudo-randomly using a diverse selection of block and transaction properties. This approach does not guarantee true randomness! In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","refundAddress":"The 20-byte address where any excess ether is returned to.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate3AndInit(bytes32,bytes,bytes,(uint256,uint256))":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system. Furthermore, we strongly recommend implementing a permissioned deploy protection by setting the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun proxy deployments on other chains.","details":"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","salt":"The 32-byte random value used to create the proxy contract address.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreate3AndInit(bytes32,bytes,bytes,(uint256,uint256),address)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system. Furthermore, we strongly recommend implementing a permissioned deploy protection by setting the first 20 bytes equal to `msg.sender` in the `salt` to prevent maliciously intended frontrun proxy deployments on other chains.","details":"Deploys and initialises a new contract via employing the `CREATE3` pattern (i.e. without an initcode factor) and using the salt value `salt`, the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor. This implementation is based on Solmate: https://web.archive.org/web/20230921113832/https://raw.githubusercontent.com/transmissions11/solmate/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/CREATE3.sol.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","refundAddress":"The 20-byte address where any excess ether is returned to.","salt":"The 32-byte random value used to create the proxy contract address.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreateAndInit(bytes,bytes,(uint256,uint256))":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor, and any excess ether is returned to `msg.sender`.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreateAndInit(bytes,bytes,(uint256,uint256),address)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys and initialises a new contract via calling the `CREATE` opcode and using the creation bytecode `initCode`, the initialisation code `data`, the struct for the `payable` amounts `values`, the refund address `refundAddress`, and `msg.value` as inputs. In order to save deployment costs, we do not sanity check the `initCode` length. Note that if `values.constructorAmount` is non-zero, `initCode` must have a `payable` constructor.","params":{"data":"The initialisation code that is passed to the deployed contract.","initCode":"The creation bytecode.","refundAddress":"The 20-byte address where any excess ether is returned to.","values":"The specific `payable` amounts for the deployment and initialisation call."},"returns":{"newContract":"The 20-byte address where the contract was deployed."}},"deployCreateClone(address,bytes)":{"custom:security":"This function allows for reentrancy, however we refrain from adding a mutex lock to keep it as use-case agnostic as possible. Please ensure at the protocol level that potentially malicious reentrant calls do not affect your smart contract system.","details":"Deploys a new EIP-1167 minimal proxy contract using the `CREATE` opcode, and initialises the implementation contract using the implementation address `implementation`, the initialisation code `data`, and `msg.value` as inputs. Note that if `msg.value` is non-zero, the initialiser function called via `data` must be `payable`.","params":{"data":"The initialisation code that is passed to the deployed proxy contract.","implementation":"The 20-byte implementation contract address."},"returns":{"proxy":"The 20-byte address where the clone was deployed."}}},"stateVariables":{"_SELF":{"details":"Caches the contract address at construction, to be used for the custom errors."}},"title":"CreateX Factory Smart Contract","version":1},"methodIdentifiers":{"computeCreate2Address(bytes32,bytes32)":"0x890c283b","computeCreate2Address(bytes32,bytes32,address)":"0xd323826a","computeCreate3Address(bytes32)":"0x6cec2536","computeCreate3Address(bytes32,address)":"0x42d654fc","computeCreateAddress(address,uint256)":"0x74637a7a","computeCreateAddress(uint256)":"0x28ddd046","deployCreate(bytes)":"0x27fe1822","deployCreate2(bytes)":"0x26a32fc7","deployCreate2(bytes32,bytes)":"0x26307668","deployCreate2AndInit(bytes,bytes,(uint256,uint256))":"0xc3fe107b","deployCreate2AndInit(bytes,bytes,(uint256,uint256),address)":"0xe437252a","deployCreate2AndInit(bytes32,bytes,bytes,(uint256,uint256))":"0xe96deee4","deployCreate2AndInit(bytes32,bytes,bytes,(uint256,uint256),address)":"0xa7db93f2","deployCreate2Clone(address,bytes)":"0x81503da1","deployCreate2Clone(bytes32,address,bytes)":"0x2852527a","deployCreate3(bytes)":"0x7f565360","deployCreate3(bytes32,bytes)":"0x9c36a286","deployCreate3AndInit(bytes,bytes,(uint256,uint256))":"0x2f990e3f","deployCreate3AndInit(bytes,bytes,(uint256,uint256),address)":"0xf5745aba","deployCreate3AndInit(bytes32,bytes,bytes,(uint256,uint256))":"0x00d84acb","deployCreate3AndInit(bytes32,bytes,bytes,(uint256,uint256),address)":"0xddda0acb","deployCreateAndInit(bytes,bytes,(uint256,uint256))":"0x31a7c8c8","deployCreateAndInit(bytes,bytes,(uint256,uint256),address)":"0x98e81077","deployCreateClone(address,bytes)":"0xf9664498"},"runtimeBytecode":{"bytecode":"0x608060405260043610610146575f3560e01c806381503da1116100b3578063d323826a1161006d578063d323826a146102f8578063ddda0acb14610317578063e437252a1461032a578063e96deee41461033d578063f5745aba14610350578063f966449814610363575f80fd5b806381503da11461027a578063890c283b1461028d57806398e81077146102ac5780639c36a286146102bf578063a7db93f2146102d2578063c3fe107b146102e5575f80fd5b80632f990e3f116101045780632f990e3f146101e457806331a7c8c8146101f757806342d654fc1461020a5780636cec25361461022957806374637a7a146102485780637f56536014610267575f80fd5b8062d84acb1461014a578063263076681461017957806326a32fc71461018c57806327fe18221461019f5780632852527a146101b257806328ddd046146101c5575b5f80fd5b61015d610158366004611ac9565b610376565b6040516001600160a01b03909116815260200160405180910390f35b61015d610187366004611b42565b61038d565b61015d61019a366004611b85565b6103ea565b61015d6101ad366004611b85565b610402565b61015d6101c0366004611bd1565b61043b565b3480156101d0575f80fd5b5061015d6101df366004611c23565b610594565b61015d6101f2366004611c3a565b6105bf565b61015d610205366004611c3a565b6105dc565b348015610215575f80fd5b5061015d610224366004611ca9565b6105e9565b348015610234575f80fd5b5061015d610243366004611c23565b610640565b348015610253575f80fd5b5061015d610262366004611cd3565b61066b565b61015d610275366004611b85565b610a9c565b61015d610288366004611cfb565b610aae565b348015610298575f80fd5b5061015d6102a7366004611d2f565b610ac8565b61015d6102ba366004611d4f565b610af4565b61015d6102cd366004611b42565b610cc7565b61015d6102e0366004611dc4565b610e2f565b61015d6102f3366004611c3a565b611026565b348015610303575f80fd5b5061015d610312366004611e4d565b61103b565b61015d610325366004611dc4565b611064565b61015d610338366004611d4f565b611368565b61015d61034b366004611ac9565b61137d565b61015d61035e366004611d4f565b61138b565b61015d610371366004611cfb565b6113a0565b5f6103848585858533611064565b95945050505050565b5f80610398846114d0565b90508083516020850134f591506103ae82611700565b60405181906001600160a01b038416907fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f7905f90a35092915050565b5f6103fc6103f661176a565b8361038d565b92915050565b5f81516020830134f0905061041681611700565b6040516001600160a01b038216905f80516020611f18833981519152905f90a2919050565b5f80610446856114d0565b90505f8460601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037825ff59350506001600160a01b0383166104ea5760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024015b60405180910390fd5b60405182906001600160a01b038516907fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f7905f90a35f80846001600160a01b0316348760405161053a9190611e76565b5f6040518083038185875af1925050503d805f8114610574576040519150601f19603f3d011682016040523d82523d5f602084013e610579565b606091505b50915091506105898282896117c3565b505050509392505050565b5f6103fc7f00000000000000000000000000000000000000000000000000000000000000008361066b565b5f6105d46105cb61176a565b85858533611064565b949350505050565b5f6105d484848433610af4565b5f604051825f5260ff600b53836020527f21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f6040526055600b20601452806040525061d6945f52600160345350506017601e20919050565b5f6103fc827f00000000000000000000000000000000000000000000000000000000000000006105e9565b5f6060602560fa1b61068560016001600160401b03611e8c565b6001600160401b03168411156106d957604051633c55ab3b60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b835f0361073557604051606b60f91b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152600160ff1b60368201526037015b6040516020818303038152906040529150610a8c565b607f841161078257604051606b60f91b60208201526001600160f81b031980831660218301526001600160601b0319606088901b16602283015260f886901b16603682015260370161071f565b60ff84116107d95760405160d760f81b60208201526001600160f81b031980831660218301526001600160601b0319606088901b166022830152608160f81b603683015260f886901b16603782015260380161071f565b61ffff841161083957604051601b60fb1b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152604160f91b60368201526001600160f01b031960f086901b16603782015260390161071f565b62ffffff841161089a5760405160d960f81b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152608360f81b60368201526001600160e81b031960e886901b166037820152603a0161071f565b63ffffffff84116108fc57604051606d60f91b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152602160fa1b60368201526001600160e01b031960e086901b166037820152603b0161071f565b64ffffffffff841161095f5760405160db60f81b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152608560f81b60368201526001600160d81b031960d886901b166037820152603c0161071f565b65ffffffffffff84116109c357604051603760fa1b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152604360f91b60368201526001600160d01b031960d086901b166037820152603d0161071f565b66ffffffffffffff8411610a285760405160dd60f81b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152608760f81b60368201526001600160c81b031960c886901b166037820152603e0161071f565b604051606f60f91b60208201526001600160f81b0319821660218201526001600160601b0319606087901b166022820152601160fb1b60368201526001600160c01b031960c086901b166037820152603f0160405160208183030381529060405291505b5080516020909101209392505050565b5f6103fc610aa861176a565b83610cc7565b5f610ac1610aba61176a565b848461043b565b9392505050565b5f610ac183837f000000000000000000000000000000000000000000000000000000000000000061103b565b5f8451602086018451f09050610b0981611700565b6040516001600160a01b038216905f80516020611f18833981519152905f90a25f80826001600160a01b0316856020015187604051610b489190611e76565b5f6040518083038185875af1925050503d805f8114610b82576040519150601f19603f3d011682016040523d82523d5f602084013e610b87565b606091505b509150915081610bce577f00000000000000000000000000000000000000000000000000000000000000008160405163a57ca23960e01b81526004016104e1929190611ebf565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163115610cbd57836001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316316040515f6040518083038185875af1925050503d805f8114610c70576040519150601f19603f3d011682016040523d82523d5f602084013e610c75565b606091505b50909250905081610cbd577f00000000000000000000000000000000000000000000000000000000000000008160405163c2b3f44560e01b81526004016104e1929190611ebf565b5050949350505050565b5f80610cd2846114d0565b90505f6040518060400160405280601081526020016f67363d3d37363d34f03d5260086018f360801b81525090505f828251602084015ff590506001600160a01b038116610d5e5760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b60405183906001600160a01b038316907f2feea65dd4e9f9cbd86b74b7734210c59a1b2981b5b137bd0ee3e208200c9067905f90a3610d9c83610640565b93505f816001600160a01b03163487604051610db89190611e76565b5f6040518083038185875af1925050503d805f8114610df2576040519150601f19603f3d011682016040523d82523d5f602084013e610df7565b606091505b50509050610e05818661181f565b6040516001600160a01b038616905f80516020611f18833981519152905f90a25050505092915050565b5f80610e3a876114d0565b9050808651602088018651f59150610e5182611700565b60405181906001600160a01b038416907fb8fda7e00c6b06a2b54e58521bc5894fee35f1090e5a3bb6390bfe2b98b497f7905f90a35f80836001600160a01b0316866020015188604051610ea59190611e76565b5f6040518083038185875af1925050503d805f8114610edf576040519150601f19603f3d011682016040523d82523d5f602084013e610ee4565b606091505b509150915081610f2b577f00000000000000000000000000000000000000000000000000000000000000008160405163a57ca23960e01b81526004016104e1929190611ebf565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016311561101a57846001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316316040515f6040518083038185875af1925050503d805f8114610fcd576040519150601f19603f3d011682016040523d82523d5f602084013e610fd2565b606091505b5090925090508161101a577f00000000000000000000000000000000000000000000000000000000000000008160405163c2b3f44560e01b81526004016104e1929190611ebf565b50505095945050505050565b5f6105d461103261176a565b85858533610e2f565b5f604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b5f8061106f876114d0565b90505f6040518060400160405280601081526020016f67363d3d37363d34f03d5260086018f360801b81525090505f828251602084015ff590506001600160a01b0381166110fb5760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b60405183906001600160a01b038316907f2feea65dd4e9f9cbd86b74b7734210c59a1b2981b5b137bd0ee3e208200c9067905f90a361113983610640565b93505f816001600160a01b0316875f01518a6040516111589190611e76565b5f6040518083038185875af1925050503d805f8114611192576040519150601f19603f3d011682016040523d82523d5f602084013e611197565b606091505b505090506111a5818661181f565b6040516001600160a01b038616905f80516020611f18833981519152905f90a26060856001600160a01b031688602001518a6040516111e49190611e76565b5f6040518083038185875af1925050503d805f811461121e576040519150601f19603f3d011682016040523d82523d5f602084013e611223565b606091505b5090925090508161126b577f00000000000000000000000000000000000000000000000000000000000000008160405163a57ca23960e01b81526004016104e1929190611ebf565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016311561135a57866001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316316040515f6040518083038185875af1925050503d805f811461130d576040519150601f19603f3d011682016040523d82523d5f602084013e611312565b606091505b5090925090508161135a577f00000000000000000000000000000000000000000000000000000000000000008160405163c2b3f44560e01b81526004016104e1929190611ebf565b505050505095945050505050565b5f61038461137461176a565b86868686610e2f565b5f6103848585858533610e2f565b5f61038461139761176a565b86868686611064565b5f808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037815ff09250506001600160a01b03821661143d5760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b6040516001600160a01b038316905f80516020611f18833981519152905f90a25f80836001600160a01b031634866040516114789190611e76565b5f6040518083038185875af1925050503d805f81146114b2576040519150601f19603f3d011682016040523d82523d5f602084013e6114b7565b606091505b50915091506114c78282886117c3565b50505092915050565b5f805f6114dc84611893565b90925090505f8260028111156114f4576114f4611f03565b14801561151157505f81600281111561150f5761150f611f03565b145b1561154f57604080513360208201524691810191909152606081018590526080016040516020818303038152906040528051906020012092506116f9565b5f82600281111561156257611562611f03565b1480156115805750600181600281111561157e5761157e611f03565b145b1561159f5761159833855f9182526020526040902090565b92506116f9565b5f8260028111156115b2576115b2611f03565b036115fb576040516313b3a2a160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b600182600281111561160f5761160f611f03565b14801561162c57505f81600281111561162a5761162a611f03565b145b156116445761159846855f9182526020526040902090565b600182600281111561165857611658611f03565b1480156116765750600281600281111561167457611674611f03565b145b156116bf576040516313b3a2a160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b6116c761176a565b84036116d357836116f6565b604080516020810186905201604051602081830303815290604052805190602001205b92505b5050919050565b6001600160a01b038116158061171e57506001600160a01b0381163b155b156117675760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b50565b6040805143601f198101406020830152419282019290925260608101919091524260808201524460a08201524660c08201523360e08201525f906101000160405160208183030381529060405280519060200120905090565b8215806117d857506001600160a01b0381163b155b1561181a577f00000000000000000000000000000000000000000000000000000000000000008260405163a57ca23960e01b81526004016104e1929190611ebf565b505050565b81158061183357506001600160a01b038116155b8061184657506001600160a01b0381163b155b1561188f5760405163602e773d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024016104e1565b5050565b5f80606083901c331480156118bb57508260141a60f81b6001600160f81b031916600160f81b145b156118ca57505f905080915091565b606083901c331480156118ec57506001600160f81b0319601484901a60f81b16155b156118fc57505f90506001915091565b33606084901c0361191257505f90506002915091565b606083901c15801561193757508260141a60f81b6001600160f81b031916600160f81b145b156119475750600190505f915091565b606083901c15801561196857506001600160f81b0319601484901a60f81b16155b1561197857506001905080915091565b606083901c61198d5750600190506002915091565b8260141a60f81b6001600160f81b031916600160f81b036119b35750600290505f915091565b8260141a60f81b6001600160f81b0319165f036119d65750600290506001915091565b506002905080915091565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112611a04575f80fd5b81356001600160401b0380821115611a1e57611a1e6119e1565b604051601f8301601f19908116603f01168101908282118183101715611a4657611a466119e1565b81604052838152866020858801011115611a5e575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f60408284031215611a8d575f80fd5b604051604081018181106001600160401b0382111715611aaf57611aaf6119e1565b604052823581526020928301359281019290925250919050565b5f805f8060a08587031215611adc575f80fd5b8435935060208501356001600160401b0380821115611af9575f80fd5b611b05888389016119f5565b94506040870135915080821115611b1a575f80fd5b50611b27878288016119f5565b925050611b378660608701611a7d565b905092959194509250565b5f8060408385031215611b53575f80fd5b8235915060208301356001600160401b03811115611b6f575f80fd5b611b7b858286016119f5565b9150509250929050565b5f60208284031215611b95575f80fd5b81356001600160401b03811115611baa575f80fd5b6105d4848285016119f5565b80356001600160a01b0381168114611bcc575f80fd5b919050565b5f805f60608486031215611be3575f80fd5b83359250611bf360208501611bb6565b915060408401356001600160401b03811115611c0d575f80fd5b611c19868287016119f5565b9150509250925092565b5f60208284031215611c33575f80fd5b5035919050565b5f805f60808486031215611c4c575f80fd5b83356001600160401b0380821115611c62575f80fd5b611c6e878388016119f5565b94506020860135915080821115611c83575f80fd5b50611c90868287016119f5565b925050611ca08560408601611a7d565b90509250925092565b5f8060408385031215611cba575f80fd5b82359150611cca60208401611bb6565b90509250929050565b5f8060408385031215611ce4575f80fd5b611ced83611bb6565b946020939093013593505050565b5f8060408385031215611d0c575f80fd5b611d1583611bb6565b915060208301356001600160401b03811115611b6f575f80fd5b5f8060408385031215611d40575f80fd5b50508035926020909101359150565b5f805f8060a08587031215611d62575f80fd5b84356001600160401b0380821115611d78575f80fd5b611d84888389016119f5565b95506020870135915080821115611d99575f80fd5b50611da6878288016119f5565b935050611db68660408701611a7d565b9150611b3760808601611bb6565b5f805f805f60c08688031215611dd8575f80fd5b8535945060208601356001600160401b0380821115611df5575f80fd5b611e0189838a016119f5565b95506040880135915080821115611e16575f80fd5b50611e23888289016119f5565b935050611e338760608801611a7d565b9150611e4160a08701611bb6565b90509295509295909350565b5f805f60608486031215611e5f575f80fd5b8335925060208401359150611ca060408501611bb6565b5f82518060208501845e5f920191825250919050565b6001600160401b03828116828216039080821115611eb857634e487b7160e01b5f52601160045260245ffd5b5092915050565b60018060a01b0383168152604060208201525f82518060408401528060208501606085015e5f606082850101526060601f19601f8301168401019150509392505050565b634e487b7160e01b5f52602160045260245ffdfe4db17dd5e4732fb6da34a148104a592783ca119a1e7bb8829eba6cbadef0b511a26469706673582212205c996ef204194b1aa912ec90e05f1b62390f969518fbd8b9d374be5b737fb14164736f6c63430008190033"},"sourceId":"CreateX.sol","sourcemap":"6683:58382:7:-:0;;;7139:4;7096:48;;6683:58382;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","userdoc":{"kind":"user","methods":{},"notice":"Factory smart contract to make easier and safer usage of the `CREATE` (https://web.archive.org/web/20230921103540/https://www.evm.codes/#f0?fork=shanghai) and `CREATE2` (https://web.archive.org/web/20230921103540/https://www.evm.codes/#f5?fork=shanghai) EVM opcodes as well as of `CREATE3`-based (https://web.archive.org/web/20230921103920/https://github.com/ethereum/EIPs/pull/3171) contract creations.","version":1}}